#!/usr/bin/env python3
from notears import linear, utils
import pandas as pd
import numpy as np
import argparse
import os
import time
from scipy.stats import zscore


def main(args):
    # get the start time
    st = time.process_time()
    st2 = time.time()

    df = pd.read_csv(args.X_path, sep="\t",index_col=0)   # read dummy .tsv file into memory

    if (args.zscore):
        df = df.apply(zscore)

    X = df.values
    W_est = linear.notears_linear(X, lambda1=args.lambda1, loss_type=args.loss_type, w_threshold=args.w_threshold)
    # assert utils.is_dag(W_est)
    ans = pd.DataFrame(W_est, columns = df.columns, index = df.columns)
    ans.to_csv(args.W_path, sep="\t", float_format='%.5f')

    # get cpu execution time
    et = time.process_time()
    res = et - st
    # get total run time
    et2 = time.time()
    res2 = et2 - st2

    if (args.runtime):
        timefile = args.time_path
        with open(timefile, 'w') as f:
            f.write('CPU Execution time: ' + str(res) + ' s' + '\n')
            f.write('runtime: ' + str(res2) + " s")
    


def parse_args():
    parser = argparse.ArgumentParser(description='Run NOTEARS algorithm')
    parser.add_argument('X_path', type=str, help='n by p data matrix in tsv format')
    parser.add_argument('--lambda1', type=float, default=0.1, help='L1 regularization parameter')
    parser.add_argument('--loss_type', type=str, default='l2', help='l2, logistic, poisson loss')
    parser.add_argument('--W_path', type=str, default='W_est.csv', help='p by p weighted adjacency matrix of estimated DAG in csv format')
    parser.add_argument('--w_threshold', type=float, default=0, help='Drop edge if |weight| < threshold')
    parser.add_argument('--runtime', action='store_true', help='output a runtime file')
    parser.add_argument('--time_path', type=str, default="runtime.txt", help='output a runtime file')
    parser.add_argument("--zscore", action='store_true', help = "z-score input data (i.e. set mean = 0, stdev = 1)")

    args = parser.parse_args()
    return args


if __name__ == '__main__':
    args = parse_args()
    main(args)

